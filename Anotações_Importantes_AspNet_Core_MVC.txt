=================================================
       CRIANDO UM SITE: APS.NET CORE MVC
=================================================
>>> Create a new project
>>> Pesquise [asp.net core web app]
>>> >>> Selecione: ASP.NET Core Web App (Model-View-Controller)
>>> >>> >>>
>>> Project Name: MVC_01
>>> Location: Selecione o local para salvar o projeto
>>> Solution Name: MVC_01
>>> Desmarque: Place solution and project in the same directory
>>> >>>	
>>> Framework: .NET 6.0
>>> Authentication type: None
>>> Marcar Configure for HTTPS
>>> Create




=================================================
 Links úteis
=================================================
https://www.connectionstrings.com/




===========================================
 Processo para criar banco
===========================================
- Criar a classe de modelo (modelo de domínio)
- Entityframework
-- Migrations
--- Banco de dados

===========================================
   Entityframework
-------------------------------------------
  LINQ >>> DbContext >>> SQL >>> DbSet
  
  O Entityframework possui duas classe importantes:
  - DbContext
  - DbSet<T>
  
  >>> DbContext  [DataBase]
  >>> >>> Conexão com a base de dados
  >>> >>> Operação com dados 
  >>> >>> Consulta e persistência
  >>> >>> Mapeamento de dados 
  >>> >>> Gestão de transação
  >>> >>> Possui 1 ou + DbSets
  
  >>> DbSet<T>   [Tabelas]
  >>> >>> Coleção para entidade do modelo (Classes)
  >>> >>> Coleção persiste na memória
  >>> >>> Para concretizar e salvar as alterações na base de dados devemos usar "SaveChange()"
  >>> >>> Para cada modelo devo criar um DbSet
  
  
-------------------------------------------
 Instalando Entityframework
-------------------------------------------
SQL SERVER
>>> NuGet 
>>>    Microsoft.EntityFrameworkCore.SqlServer
>>>    Microsoft.EntityFrameworkCore.Design

MySQL
>>> NuGet
>>>    Pomelo.EntityFrameworkCore.MySql
>>>    Microsoft.EntityFrameworkCore.Design
>>>    String de Conexão
			"Server=localhost;Database=nome;Uid=usuario;Password=senha"



-------------------------------------------
 Criando a classe CONTEXT
-------------------------------------------
>>> Diretório "Context" 
>>>    AppDbContext.cs (Essa classe poderia ter qualquer nome)

-------------------------------------------
 String de conexão
-------------------------------------------
>>> No arquivo "appsettings.json"

>>>    Autenticação com Windows
  "ConnectionStrings": {
    "DefaultConnection": "Server=DESKTOP-74TBS68\\SQLEXPRESS; Initial Catalog=LanchesDatabase; Integrated Security=True; TrustServerCertificate=True;"
  },


OUTROS EXEMPLOS DE STRING DE CONEXÃO
>>> SQL Server Authentication: Server=ServerName;Database=DatabaseName;User Id=UserName;Password=UserPassword;
>>> Windows Authentication: Server=ServerName;Database=DatabaseName;Trusted_Connection=True;
>>> LocalDB: Server=(localdb)\MinhaInstancia;Integrate Security=True;
>>> SQL Express: Data Source=nome_server\\sqlexpress;Initial Catalog=Database1;Integrate Security=True;

>>> Obs: Esta string de conexao deve ser utilizada somente no ambiente de desenvolvimento:
>>>    Server=DESKTOP-74TBS68\\SQLEXPRESS; Initial Catalog=LanchesDatabase; Integrated Security=True; TrustServerCertificate=True;

-------------------------------------------
 Referenciando a string de conexao em nosso projeto
-------------------------------------------
>>> No arquivo "Program.cs" adicione o código 

using LancheMac_SSMS.Context;   // <<<<<
using Microsoft.EntityFrameworkCore;  // <<<<<

var builder = WebApplication.CreateBuilder(args);


//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
// Configurar a string de conexão
var connectionString = builder.Configuration.GetConnectionString("DefaultConnection");

// Registrar o DbContext e configurar o SQL Server
builder.Services.AddDbContext<AppDbContext>(options =>
    options.UseSqlServer(connectionString)
);
//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


-------------------------------------------
 Certificado digital
-------------------------------------------
>>> Em algumas situações será necessario ter um certificado digital (https) no 
ambiente de desenvolvimento.

>>> Verifica a existência do certificado de desenvolvimento, mas não executa nenhuma ação.
>>>    dotnet dev-certs https --check

>>> Gera um certificado auto assinado para HTTPS no desenvolvimento
>>>    dotnet dev-certs https

>>> Confia no certificado da maquina local 
>>>    dotnet dev-certs https --trust

-------------------------------------------
Data Annotations
-------------------------------------------
>>> System.ComponentModel.DataAnnotations
>>> System.ComponentModel.DataAnnotations.Schema

>>> Impor regras de validação na view
-------------------------------------------
>>>    Required - Propriedade obrigatória
>>>    Range - Restrição de intervalo numérico
>>>    EmailAddress - Valida o formato de um e-mail
>>>    Phone - Valida formato telefone
>>>    MinLenght - Comprimento mínino dos dados de cadeira de caracteres da propriedade
>>>    MaxLenght - Comprimento máximo dos dados de cadeira de caracteres da propriedade
>>>    StringLenght - Comprimento mínimo e máximo de caracteres permitido na propriedade
>>>    RegularExpression - Permite definir expressões regulares para validações especificas
>>>    Display - Especifica como os campos de dados são exibidos e formatados na View
>>>    DisplayFormat - Aplica um formato definido a uma propriedade que será exibido na View
>>>    Obs.: Parâmetro "ErrorMessage" define a mensagem de erro

>>> Atributos de modelagem de dados
-------------------------------------------
>>>    Key* - Identifica a propriedade como uma chave primária
>>>    Table - Define o nome da tabela para a qual a classe será mapeada
>>>    Column - Define a coluna na tabela para a qual a propriedade será mapeada
>>>    DataType* - Associa um tipo de dados adicional a uma propriedade
>>>    ForeignKey - Espeficia que a propriedade é usada como uma chave estrangeira
>>>    NotMapped - Exclui a propriedade do mapeamento
>>>    Obs.: * System.ComponentModel.DataAnnotations.Schema

-------------------------------------------
 MIGRATIONS
-------------------------------------------
>>> Permite atualizar de forma incremental o esquema do banco de dados e assim
mantê-lo sincronizado com o modelo de dados do seu projeto presernvando os dados existentes.

>>> Principais tarefas:
>>>    Atualizar o banco de dados.
>>>    Personalizar o código de migração (modificar e suplementar o código gerado)
>>>    Remover uma migração (Excluir o código gerado)
>>>    Reverter uma migração (Desfazer as alterações no banco de dados)
>>>    Gerar Scripts SQL (gerar scripts para atualizar ou solucionar problemas)
>>>    Aplicar migrações em tempo de execução: Usar o metodo "Migrate()" para migração em runtime

>>> Requisitos
>>>    Instalar as ferramentas do "Entity Framework Core"
>>>    Criar o modelo de entidade (classes)
>>>    Criar a classe de contexto (DbContext, DbSets) para mapear as entidades
>>>    Definir a string de conexão (appsettings.json)
>>>    Definir o provedor/serviçõ do banco de dados e a string de conexão (Program.cs)

>>> Como utilizar o migration
>>>    Com o Package Manager Console do Visul Studio
>>>    Ou com a linha de comando (NET CLI) com VS Code
>>>    O processo exige duas etapas(1º Criar a migração, 2º Aplicar a migração)



>>> Migration com Package Manager Console
-------------------------------------------
>>>    0º De um Build no projeto

>>>    1º Criando a migração
>>>        add-migration NomeDaMigração [options]

>>>    2º Aplicando a migração
>>>        update-database [options]

>>>    3º Removendo a migração
>>>        remove-migration



>>> Migration com VS Code (Ferramenta NET CLI)
-------------------------------------------
>>>    Instalar a ferramenta de linha de comando do EF Core
>>>        dotnet tool install --global dotnet-ef

>>>    0º De um Build no projeto

>>>    1º Criando a migração
>>>        dotnet ef migrations add NomeDaMigração [options]

>>>    2º Aplicando a migração
>>>        dotnet ef database update [options]

>>>    3º Removendo a migração
>>>        dotnet ef migrations remove



>>> POPULANDO a tabela com MIGRATIONS
-------------------------------------------
>>> Primeiro devemos criar uma migration.
>>>    add-migration NomeDaMigração

>>> Se vc não fez nenhuma alteração nas classes de entidade será criado uma migration vazia.
>>> Faça o insert através do método "UP" conforme exemplo e depois execute o comando "update-database"

-------
   public partial class PopularCategorias : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.Sql("insert into Categoria(CategoriaNome, Descricao) " +
                "values('Normal', 'Lanche feito com os melhores ingredientes')");

            migrationBuilder.Sql("insert into Categoria(CategoriaNome, Descricao) " +
                "values('Natural', 'Lanche feito com ingredientes integrais e naturais')");
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.Sql("DELETE FROM Categoria");
        }
    }
}
-----





===========================================
 IMPLEMENTANDO O PADRÃO REPOSITORIES
===========================================
>>> Devemos criar a pasta "repositories" e dentro desta pasta criamos a pasta "Interfaces"
>>>    Dentro da pasta "Interfaces" vamos criar nossas interfaces
>>>    Dentro da pasta "repositories" vamos criar as classes concretas que irão implenetar as interfaces
>>>    Depois devemos Registrando os serviços de repositórios : Injeção de dependência
>>>    Em nosso exemplo isso é feito no arquivo "Program.cs"
>>>        Temos três escopos:
>>>        1: Transient: services.AddTransient<,>
				Uma nova instância do serviço é criada cada vez que um serviço é solicitado do provedor de serviços.
				Se o serviço for descartado, o escopo do serviço monitorará todas as instâncias do serviço de destruirá
				todas as instâncias do serviço criadas nesse escopo quando o escopo do serviço for descartado.
           2: Scoped: services.AddScoped<,>
				Uma nova instância do serviço é criada em cada request. A cada requisição temos uma nova instância do serviço.
				Se o serviço for descartável, ele será descartado quando o escopo do serviço for descartado.
		   3: Singleton: services.AddSingleton<,>
				Apenas uma instância do serviço é criada se ainda não estiver registrada como uma instância. Um objeto do serviço
				é criado e fornecido para todas as requisições. Todas as requisições obtém o mesmo objeto.

Exemplo:
//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
// Configurar a string de conexão
var connectionString = builder.Configuration.GetConnectionString("DefaultConnection");

// Registrar o DbContext e configurar o SQL Server
builder.Services.AddDbContext<AppDbContext>(options =>
    options.UseSqlServer(connectionString)
);

// Registrando os serviços de repositórios : Injeção de dependência
builder.Services.AddTransient<ILancheRepository, LancheRepository>();
builder.Services.AddTransient<ICategoriaRepository, CategoriaRepository>();

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<




===========================================
VIEWDATA
===========================================
>>> Transfere dados do controller para a View.
	É do tipo ViwDataDictionary
	É um dicionário quearmazena dados no formato chave[valor]
	Exige a conversão de tipos para verificar valores nulos, obter dados, evitar erros.
	Tempo de vida é o request.


>>> Exemplo no controller
	ViewData["Titulo"] = "Todos os lanches";
	ViewData["Data"] = DateTime.Now;
	
>>> Recuperando os dados na View.
	@ViewData["Titulo"]
	@ViewData["Data"]
	


===========================================
VIEWBAG
===========================================
>>> Transfere dados do Controller para a View.
	É uma propriedade dinâmica (dynamic)
	É um tipo object que armazena dados no formato chave.valor
	Não requer a conversão de tipo
	
>>> Exemplo no controller
	ViewBag.Total = "Total de Lanches";
	ViewBag.TotalLanches = lanches.Count();

>>> Recuperando os dados na View.
	@ViewBag.Total
	@ViewBag.TotalLanches



===========================================
TEMPDATA
===========================================
>>> Transfere dados do controller para a view, da view para o controller 
	ou de métodos Action para outro método Action no mesmo controlador ou para um controlador diferente.
	É um objeto dicionário do tipe TempDataDictionary que armazena dados no formato chave[valor]
	Armazena os dados temporariamente e os remove automaticamente após recupear um valor.
	Exige a conversão de tipo.
	
>>> Exemplo no controller
	TempData["Nome"] = "RD3W";

>>> Recuperando os dados na View.
	@TempData["Nome"]
	
>>> Observação:	
	É necessário verificar se a chave existe caso contrário será lançado uma exceção.
	
	Exemplo:
	
	@if(TempData.ContainsKey("Nome")){
		<h1>@TempData["Nome"];</h1>
	}
	
	


===========================================
VIEWMODEL
===========================================
>>> É um apadrão de projeto que permite separar as responsabilidades do modelo de domínio dos modelos que atendam as views.
	Representa o conjunto de uma ou mais entidades do Modelo de Domínio e de outras informações que serão exibidas em uma View.
	ViewModels são usadas para moldar múltiplas entidades do modelo de domínio em um único objeto oferencendo uma melhor otimização.
	1. Contém apenas as propriedades que serão representadas na view.
	2. Pode possuir regras específicas de validação (Data Annotations)
	3. Pode conter múltiplas entidades ou objetos dos modelos de domínio.
	4. Contém a lógica da interface do usuário
	5. Contém somente dados e comportamentos relacionados às Views.
	
>>> Utilização da ViewModel 
	- Gerenciar ou criar listas suspensas para uma entidade.
	- Criar Views Mestre-Detalhes
	- Usar em carrinhos de compras
	- Usadas em paginação de dados 
	- Udadas para implenetar o login e o registro.
	- Permite isolar e desacoplar o modelo de domínio da lógica de exibição da view.
	





===========================================
 PARTIAL VIEW
===========================================
>>> É uma view que é renderizada em outra view.
	São usadas para encapsular a lógica reutilizada nas views permimtindo simplificar a complexidade das views.
	Podem ser usadas em múltiplas views onde é necessário uma lógica similar evitando assim duplicidade de código.
	
>>> Principais usos:
	- Renderizar menus de navegação
	- Desenvolver formulários de entrada comuns
	- Renderizar dados comuns às views (reduz a duplicação)
	- Dividir arquivos de marcação grandes em arquivos menores.
	- Possuem a extensão .cshtml
	- Podem ser retornadas em um método Action (ViewResult)
	- São iguais as views (a nível de código)
	- São renderizadas de forma diferente (não executam o arquivo _ViewStart.cshtml)
	- São armazenadas na pasta Views ou na psta Shared dentro da patas Views
	- Recomenda-se que o nome do arquivo de uma partial view comece com um sublinhado(_)
	
>>> Comportamento de uma 'Partial View' 
	Uma 'Partial View' criada dentro de uma pasta especificas das views de um controlador pode ser usada por 
	todas as view dessa pasta.
	Uma 'Partial View' criada na pasta 'Shared' (dentro da pasta 'View') pode ser usada por todas as 
	view existentes na pasta Views.
	
>>> Utilização da Partial View
	
	<partial name="_PartialName" />
	Tag Helper 'partial' renderiza o conteúdo de forma assíncrona
	
	<partial name="~/Pages/_PartialName.cshtml" />
	Ao definir uma extensão no arquivo da partial view a tag helper referencia uma partial view que deve estar na 
	mesma pasta que o arquivo que chama a partial view.
	
	@await Html.PartialAsync("_PartialName");
	@await Html.RenderPartialAsync("_PartialName");
	Usar o Html Helper PartialAsync ou RenderPartialAsync
	
	@await Html.PartialAsync("_PartialName.cshtml");
	@await Html.RenderPartialAsync("_PartialName.cshtml");
	Quando a extensão do arquivo está presente, o HTML Helper faz referencia a uma partial view que deve 
	estar na mesma pasta que o arquivo de marcação que chama a partial view.
	
>>> Observação:
	Não é recomendável usar @Html.Partial newm @Html.RenderPartial pois eles são síncronos.


>>> Partial View com ACESSO A DADOS
	
	<partial name="_PartialName" for="Model" />
	@await Html.PartialAsync("_PartialName", model);
	@await Html.RenderPartialAsync("_PartialName", model);
	
	Quando uma partial view é instanciada, ela recebe uma cópia do dicionário 'ViewData' do pai.
	As atualizações feitas nos dados dentro da partial view não sao persistidas na View Pai.
	As alterações no "ViewData" em uma partial view são perdidas quando a partial view retorna.
	


===========================================
 CARRINHO DE COMPRAS
===========================================
- Criar a classe CarrinhoCompraItem na pasta MODELS que representa um produto 
  que o usuário seleciona (lanche, bebida, sobremesa).

- Incluir a definição da entidade no arquivo AppDbContext definindo uma propriedade
  DbSet<> para expressar o mapeamento entre a entidade e a tabela.

- Usar o recurso Migrations do EF Core para atualizar o esquema do banco de dados 
  criando a tabela CarrinhoCompraItens usando os comandos:
  
  add-migration CarrinhoCompraItem 
  update-database
  
	



===========================================
 SESSION
===========================================
- HTTP é um protocolo sem estado.
- Asp .NET Core - Session: Microsoft.AspNetCore.Session

- Com base em um dicionário ou tabela hash no servidor, o estado da sessão persiste
  os dados através das requisições de um navegador.
 
- O ASP.NET Core mantém o estado da sessão, dando ao cliente um cookie que contpem o ID
  da sessão, que é enviado ao servidor com cada solicitação.
  
- O servidor mantém uma sessão por tempo limitado após a última requisisção.

- Você pode definir o tempo limite da sessão ou usar o valor padrão que é de 20 minutos.

- O estado da sessão é ideal para armazenar dados do usuário espefíficos de uma determinada sessão.

- Dados sãos excluídos do cache: Sessão expira ou Session.Clear()  



Configurando Sessão
--------------------------------------------

- Classe Startup deve conter:
	
	- Qualquer um dos caches de memória: IDistributedCache
	- Uma chamada a AddSession em ConfigureServices()
	- A chamada UseSession em Configure()
  
	public void ConfigureServices(IServiceCollection services){
		// adiciona uma implementação padrão de IDstributedCache
		services.AddDistributedMemoryCache();
		services.AddSession();
	}
	
	public void Configure(IAppplicationBuilder app, IHostingEnvironment env){
		...
		app.UseSession();  <<<<
		
		app.Run(async(context) => { await context.Response.WriteAsync(msg.GetMesagem());  });
	}
		



Criando Sessão
--------------------------------------------

	- const string SessionKeyNome = "_Nome";
	- const string sessionKeyIdade = "_Idade";

- Atribuindo
	- HttpContext.Session.SetString(SessionKeyNome, "RD3W");
	- HttpContext.Session.SetInt32(sessionKeyIdade, 23);
	
- Recuperando
	- var nome = context.Session.getString(SessionKeyNome);
	- var idade = context.Session.GetInt32(sessionKeyIdade);



===========================================
===========================================
	





===========================================
===========================================
	





===========================================
===========================================
	





===========================================
===========================================
	





===========================================
===========================================
	





===========================================
===========================================
